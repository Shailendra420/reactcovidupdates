{"version":3,"sources":["api/coronavirusapi.js","components/Header/Header.jsx","components/FilterCountryControl/FilterCountryControl.jsx","components/Chart/Chart.jsx","components/TableComponent/TableComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["getCountriesData","countryName","a","axios","get","data","console","log","getCountriesStatus","useStyles","makeStyles","theme","logo","flexGrow","cursor","Header","props","classes","AppBar","position","CssBaseline","Toolbar","Typography","variant","className","FilterCountryControl","setCountryName","country","Autocomplete","disablePortal","id","options","sx","width","renderInput","params","TextField","label","getOptionLabel","Country","getOptionSelected","option","value","onChange","event","Chart","covidCountryData","labels","map","Date","datasets","Active","lineTension","fill","borderColor","backgroundColor","Confirmed","Deaths","Recovered","scales","x","ticks","font","size","table","minWidth","tableHead","fontWeight","color","paddingRight","paddingLeft","tableBody","dateColumnBody","activeColumn","confirmedColumn","deathsColumn","recoveredColumn","TableComponent","React","useState","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","slice","reverse","row","scope","toLocaleString","ID","TablePagination","count","length","onPageChange","newPage","onRowsPerPageChange","parseInt","target","App","setCountry","setCovidCountryData","useEffect","modifiedCountryString","trim","toLowerCase","split","join","then","Grid","container","spacing","style","item","xs","Box","m","pt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.776b9573.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getCountriesData = async (countryName) => {\n  try {\n    const { data } = await axios.get(`https://api.covid19api.com/countries`);\n\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCountriesStatus = async (countryName) => {\n  try {\n    const { data } = await axios.get(`https://api.covid19api.com/total/dayone/country/${countryName}`);\n\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};","import React from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    CssBaseline,\n    Typography,\n    makeStyles,\n  } from \"@material-ui/core\";\n  \n  const useStyles = makeStyles((theme) => ({\n   logo: {\n      flexGrow: \"1\",\n      cursor: \"pointer\",\n    }\n}));\n\nconst Header = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <CssBaseline />\n      <Toolbar>\n        <Typography variant=\"h5\" className={classes.logo}>\n          Covid Updates Based on Country\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nconst FilterCountryControl = ({ setCountryName, country }) => {\n\n    return (\n        <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={country}\n            sx={{ width: 300 }}\n            renderInput={(params) => <TextField {...params} label=\"Country\" />}\n            getOptionLabel={(country) => `${country.Country}`}\n            getOptionSelected={(option, value) => option.Country === value.Country}\n            onChange={(event, value) => setCountryName(value.Country)}\n        />\n    );\n}\n\nexport default FilterCountryControl;","import React from 'react';\nimport { Line } from \"react-chartjs-2\";\n\n\nconst Chart = ({ covidCountryData }) => {\n    \n    return (\n        <Line\n            data={{\n                labels: covidCountryData.map(({ Date }) => Date),\n                datasets: [{\n                    label: \"Active\",\n                    data: covidCountryData.map(({ Active }) => Active),\n                    lineTension: 0,\n                    fill: false,\n                    borderColor: \"rgb(0, 123, 255)\",\n                    backgroundColor: \"rgba(0, 123, 255, 0.2)\"\n                },{\n                    label: \"Confirmed\",\n                    data: covidCountryData.map(({ Confirmed }) => Confirmed),\n                    lineTension: 0,\n                    fill: false,\n                    borderColor: \"rgb(255, 7, 58)\",\n                    backgroundColor: \"rgba(255, 7, 58, 0.2)\"\n                },{\n                    label: \"Deaths\",\n                    data: covidCountryData.map(({ Deaths }) => Deaths),\n                    lineTension: 0,\n                    fill: false,\n                    borderColor: \"rgb(108, 117, 125)\",\n                    backgroundColor: \"rgba(108, 117, 125, 0.2)\"\n                },{\n                    label: \"Recovered\",\n                    data: covidCountryData.map(({ Recovered }) => Recovered),\n                    lineTension: 0,\n                    fill: false,\n                    borderColor: \"rgb(40, 167, 69)\",\n                    backgroundColor: \"rgba(40, 167, 69, 0.2)\"\n                }]\n            }}\n            options={{\n                scales: {\n                    x: {\n                        ticks: {\n                            font: {\n                                size: 8,\n                            }\n                        }\n                    }\n                }\n            }}\n        />)\n    };\n\nexport default Chart;","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: \"100%\",\n    },\n    tableHead: {\n        fontWeight: 700,\n        color: \"#6c757d\",\n        paddingRight: 4,\n        paddingLeft: 5,\n    },\n    tableBody: {\n    },\n    dateColumnBody: {\n        fontWeight: 700,\n        color: \"#6c757d\",\n        paddingRight: 4,\n        paddingLeft: 5,\n    },\n    activeColumn: {\n        color: \"rgb(0, 123, 255)\",\n        paddingRight: 4,\n        paddingLeft: 5,\n    },\n    confirmedColumn: {\n        color: \"rgb(255, 7, 58)\",\n        paddingRight: 4,\n        paddingLeft: 5,\n    },\n    deathsColumn: {\n        color: \"rgb(108, 117, 125)\",\n        paddingRight: 4,\n        paddingLeft: 5,\n    },\n    recoveredColumn: {\n        color: \"rgb(40, 167, 69)\",\n        paddingRight: 4,\n        paddingLeft: 5,\n    }\n});\n\nconst TableComponent = ({ covidCountryData }) => {\n\n    const [page, setPage] = React.useState(2);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  \n    const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n  \n    const handleChangeRowsPerPage = (event) => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    };\n\n    const classes = useStyles();\n    return (\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">  \n            <TableHead>\n              <TableRow>\n                <TableCell className={classes.tableHead}>Date</TableCell>\n                <TableCell className={classes.tableHead} align=\"right\">Active</TableCell>\n                <TableCell className={classes.tableHead} align=\"right\">Confirmed</TableCell>\n                <TableCell className={classes.tableHead} align=\"right\">Deaths</TableCell>\n                <TableCell className={classes.tableHead} align=\"right\">Recovered</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody className={classes.tableBody}>\n              {covidCountryData\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .reverse()\n              .map((row) => (\n                <TableRow key={row.ID} data-country={row.Country}>\n                    <TableCell className={classes.dateColumnBody} component=\"th\" scope=\"row\">{new Date(row.Date).toLocaleString()}</TableCell>\n                    <TableCell className={classes.activeColumn} align=\"right\">{row.Active}</TableCell>\n                    <TableCell className={classes.confirmedColumn} align=\"right\">{row.Confirmed}</TableCell>\n                    <TableCell className={classes.deathsColumn} align=\"right\">{row.Deaths}</TableCell>\n                    <TableCell className={classes.recoveredColumn} align=\"right\">{row.Recovered}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n                component=\"div\"\n                count={covidCountryData.length}\n                page={page}\n                onPageChange={handleChangePage}\n                rowsPerPage={rowsPerPage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </TableContainer>\n    );\n};\n\nexport default TableComponent;","\nimport React, { useEffect, useState } from 'react';\nimport { CssBaseline, Grid } from \"@material-ui/core\";\nimport Box from '@material-ui/core/Box';\nimport { getCountriesData, getCountriesStatus } from \"./api/coronavirusapi\";\n\nimport Header from \"./components/Header/Header\";\nimport FilterCountryControl from \"./components/FilterCountryControl/FilterCountryControl\";\nimport Chart from \"./components/Chart/Chart\";\nimport TableComponent from \"./components/TableComponent/TableComponent\";\n\n\nconst App = (props) => {\n  const [countryName, setCountryName] = useState('south-africa');\n  const [country, setCountry] = useState([]);\n  const [covidCountryData, setCovidCountryData] = useState([]);\n  useEffect(() => {\n    let modifiedCountryString = countryName.trim().toLowerCase().split(\" \").join(\"-\");\n    getCountriesData()\n      .then((data) => {\n        // console.log(data);\n        setCountry(data);\n      })\n      getCountriesStatus(modifiedCountryString)\n        .then((data) => {\n          // console.log(data);\n          setCovidCountryData(data);\n          console.log(\"covidCountryData\", covidCountryData);\n        })\n  }, [countryName]);\n\n  return (\n    <>\n      <CssBaseline />\n      <Header/>\n      <Grid container spacing={0} style={{ width: \"100%\" }}>\n        <Grid item xs={12}>\n          <Box m={2} pt={3}>\n            <FilterCountryControl \n              setCountryName={setCountryName}\n              country={country}\n            />\n          </Box>\n          <Box m={2} pt={3}>\n            <Chart \n              covidCountryData={covidCountryData}\n            />\n          </Box>\n          <Box m={2} pt={3}>\n            <TableComponent\n              covidCountryData={covidCountryData}\n            />\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}